setwd("~/Documents/genomic_works/hw3/transcriptomics/transcriptomics")
#Load into R
library(tximport)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("tximport")
samples <- read.table("rsem_results/samples.txt", header = TRUE)
samples
files <- file.path("rsem_results", paste0(samples$sample, ".genes.results"))
names(files) <- samples$sample
txi.rsem <- tximport(files, type = "rsem", txIn = FALSE, txOut = FALSE)
gc()
#Load into R
library(tximport)
samples <- read.table("rsem_results/samples.txt", header = TRUE)
samples
files <- file.path("rsem_results", paste0(samples$sample, ".genes.results"))
names(files) <- samples$sample
txi.rsem <- tximport(files, type = "rsem", txIn = FALSE, txOut = FALSE)
head(txi.rsem$counts)
write.csv(as.data.frame(txi.rsem$counts), file="raw_counts.csv")
zero_length_and_unexpressed = (apply(txi.rsem$counts, 1, max) > 0) &
(apply(txi.rsem$length, 1, min) > 0)
txi.rsem$length = txi.rsem$length[zero_length_and_unexpressed,]
txi.rsem$abundance = txi.rsem$abundance[zero_length_and_unexpressed,]
txi.rsem$counts = txi.rsem$counts[zero_length_and_unexpressed,]
library('DESeq2')
sampleTable <- data.frame(condition = samples$pop)
sampleTable$condition <- relevel(factor(sampleTable$condition), ref = "ctl")
rownames(sampleTable) <- colnames(txi.rsem$counts)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
BiocManager::install("DESeq2")
library(DESeq2)
library(tidyverse)
samples <- read.table("rsem_results/samples.txt", header = TRUE)
samples <- read.table("rsem_results/samples.txt", header = TRUE)
samples
files <- file.path("rsem_results", paste0(samples$sample, ".genes.results"))
names(files) <- samples$sample
txi.rsem <- tximport(files, type = "rsem", txIn = FALSE, txOut = FALSE)
head(txi.rsem$counts)
write.csv(as.data.frame(txi.rsem$counts), file="raw_counts.csv")
zero_length_and_unexpressed = (apply(txi.rsem$counts, 1, max) > 0) &
(apply(txi.rsem$length, 1, min) > 0)
txi.rsem$length = txi.rsem$length[zero_length_and_unexpressed,]
txi.rsem$abundance = txi.rsem$abundance[zero_length_and_unexpressed,]
txi.rsem$counts = txi.rsem$counts[zero_length_and_unexpressed,]
library('DESeq2')
sampleTable <- data.frame(condition = samples$pop)
sampleTable$condition <- relevel(factor(sampleTable$condition), ref = "ctl")
rownames(sampleTable) <- colnames(txi.rsem$counts)
dds <- DESeqDataSetFromTximport(txi.rsem, sampleTable, ~condition)
dds <- DESeq(dds)
resultsNames(dds)
baseMeanPerLvl <- sapply( levels(dds$condition), function(lvl) rowMeans( counts(dds,normalized=TRUE)[,dds$condition== lvl] ) )
write.csv(baseMeanPerLvl, file="normalized_counts.csv")
library(tidyverse)
trans_cts_corr <-counts(dds,normalized=TRUE) %>% cor(method = "spearman")
trans_cts_corr[1:5, 1:5]
library(corrr)
rplot(trans_cts_corr) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
write.csv(trans_cts_corr, file="correlation.csv")
res<-results(dds,name="condition_atr_vs_ctl")
resOrdered <- res[order(res$pvalue),]
write.csv(as.data.frame(resOrdered), file="condition_Atrophic_vs_Control.csv")
#Load into R
library(tximport)
samples <- read.table("rsem_results/samples.txt", header = TRUE)
samples
files <- file.path("rsem_results", paste0(samples$sample, ".genes.results"))
names(files) <- samples$sample
txi.rsem <- tximport(files, type = "rsem", txIn = FALSE, txOut = FALSE)
head(txi.rsem$counts)
write.csv(as.data.frame(txi.rsem$counts), file="raw_counts.csv")
zero_length_and_unexpressed = (apply(txi.rsem$counts, 1, max) > 0) &
(apply(txi.rsem$length, 1, min) > 0)
txi.rsem$length = txi.rsem$length[zero_length_and_unexpressed,]
txi.rsem$abundance = txi.rsem$abundance[zero_length_and_unexpressed,]
txi.rsem$counts = txi.rsem$counts[zero_length_and_unexpressed,]
library('DESeq2')
sampleTable <- data.frame(condition = samples$pop)
sampleTable$condition <- relevel(factor(sampleTable$condition), ref = "ctl")
rownames(sampleTable) <- colnames(txi.rsem$counts)
dds <- DESeqDataSetFromTximport(txi.rsem, sampleTable, ~condition)
dds <- DESeq(dds)
resultsNames(dds)
baseMeanPerLvl <- sapply( levels(dds$condition), function(lvl) rowMeans( counts(dds,normalized=TRUE)[,dds$condition== lvl] ) )
write.csv(baseMeanPerLvl, file="normalized_counts.csv")
library(tidyverse)
trans_cts_corr <-counts(dds,normalized=TRUE) %>% cor(method = "spearman")
trans_cts_corr[1:5, 1:5]
library(corrr)
rplot(trans_cts_corr) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
write.csv(trans_cts_corr, file="correlation.csv")
res<-results(dds,name="condition_atr_vs_ctl")
resOrdered <- res[order(res$pvalue),]
write.csv(as.data.frame(resOrdered), file="condition_Atrophic_vs_Control.csv")
View(sampleTable)
# Print the result
print(count_significant_genes)
# Read the CSV file into a data frame
df <- read.csv("condition_Atrophic_vs_Control.csv")
# Filter the data frame for genes with padj < 0.05 and count the rows
count_significant_genes <- sum(df$padj < 0.05, na.rm = TRUE)
# Print the result
print(count_significant_genes)
# Filter the data frame for genes with padj < 0.05 and count the rows
count_significant_genes <- sum(df$padj < 0.05)
# Print the result
print(count_significant_genes)
# Filter the data frame for genes with padj < 0.05 and count the rows
count_significant_genes <- sum(df$padj < 0.05)
# Print the result
print(count_significant_genes)
# Read the CSV file into a data frame
df <- read.csv("condition_Atrophic_vs_Control.csv")
# Filter the data frame for genes with padj < 0.05 and count the rows
count_significant_genes <- sum(df$padj < 0.05, na.rm = TRUE)
# Print the result
print(count_significant_genes)
View(df)
View(df)
print(paste("Number of downregulated genes:", downregulated_genes))
# Count upregulated genes (log2FoldChange > 0)
upregulated_genes <- sum(significant_genes$log2FoldChange > 0, na.rm = TRUE)
# Count downregulated genes (log2FoldChange < 0)
downregulated_genes <- sum(significant_genes$log2FoldChange < 0, na.rm = TRUE)
# Print the results
print(paste("Number of upregulated genes:", upregulated_genes))
print(paste("Number of downregulated genes:", downregulated_genes))
# Read the CSV file into a data frame
df <- read.csv("condition_Atrophic_vs_Control.csv")
# Filter for significant genes (adj-p < 0.05)
significant_genes <- df[df$padj < 0.05, ]
# Count upregulated genes (log2FoldChange > 0)
upregulated_genes <- sum(significant_genes$log2FoldChange > 0, na.rm = TRUE)
# Count downregulated genes (log2FoldChange < 0)
downregulated_genes <- sum(significant_genes$log2FoldChange < 0, na.rm = TRUE)
# Print the results
print(paste("Number of upregulated genes:", upregulated_genes))
print(paste("Number of downregulated genes:", downregulated_genes))
View(df)
View(df)
# Read the CSV file into a data frame
df <- read.csv("condition_Atrophic_vs_Control.csv")
# Filter for significant genes (adj-p < 0.05)
significant_genes <- df[df$padj < 0.05, ]
# Filter the data frame for genes with padj < 0.05 and count the rows
count_significant_genes <- sum(df$padj < 0.05, na.rm = TRUE)
# Print the result
print(count_significant_genes)
# Count upregulated genes (log2FoldChange > 0)
upregulated_genes <- sum(significant_genes$log2FoldChange > 0, na.rm = TRUE)
# Count downregulated genes (log2FoldChange < 0)
downregulated_genes <- sum(significant_genes$log2FoldChange < 0, na.rm = TRUE)
# Print the results
print(paste("Number of upregulated genes:", upregulated_genes))
print(paste("Number of downregulated genes:", downregulated_genes))
# Count genes with a log2FoldChange > 2
count_log2_gt_2 <- sum(significant_genes$log2FoldChange > 2, na.rm = TRUE)
# Count genes with a log2FoldChange < -2
count_log2_lt_neg_2 <- sum(significant_genes$log2FoldChange < -2, na.rm = TRUE)
# Print the results
print(paste("Number of genes with log2FoldChange > 2:", count_log2_gt_2))
print(paste("Number of genes with log2FoldChange < -2:", count_log2_lt_neg_2))
#Load into R
library(tximport)
samples <- read.table("rsem_results/samples.txt", header = TRUE)
samples
files <- file.path("rsem_results", paste0(samples$sample, ".genes.results"))
names(files) <- samples$sample
txi.rsem <- tximport(files, type = "rsem", txIn = FALSE, txOut = FALSE)
head(txi.rsem$counts)
write.csv(as.data.frame(txi.rsem$counts), file="raw_counts.csv")
zero_length_and_unexpressed = (apply(txi.rsem$counts, 1, max) > 0) &
(apply(txi.rsem$length, 1, min) > 0)
txi.rsem$length = txi.rsem$length[zero_length_and_unexpressed,]
txi.rsem$abundance = txi.rsem$abundance[zero_length_and_unexpressed,]
txi.rsem$counts = txi.rsem$counts[zero_length_and_unexpressed,]
library('DESeq2')
sampleTable <- data.frame(condition = samples$pop)
sampleTable$condition <- relevel(factor(sampleTable$condition), ref = "ctl")
rownames(sampleTable) <- colnames(txi.rsem$counts)
dds <- DESeqDataSetFromTximport(txi.rsem, sampleTable, ~condition)
dds <- DESeq(dds)
resultsNames(dds)
baseMeanPerLvl <- sapply( levels(dds$condition), function(lvl) rowMeans( counts(dds,normalized=TRUE)[,dds$condition== lvl] ) )
write.csv(baseMeanPerLvl, file="normalized_counts.csv")
library(tidyverse)
trans_cts_corr <-counts(dds,normalized=TRUE) %>% cor(method = "spearman")
trans_cts_corr[1:5, 1:5]
library(corrr)
rplot(trans_cts_corr) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
write.csv(trans_cts_corr, file="correlation.csv")
res<-results(dds,name="condition_atr_vs_ctl")
resOrdered <- res[order(res$pvalue),]
write.csv(as.data.frame(resOrdered), file="condition_Atrophic_vs_Control.csv")
#Load into R
library(tximport)
samples <- read.table("rsem_results/samples.txt", header = TRUE)
samples
files <- file.path("rsem_results", paste0(samples$sample, ".genes.results"))
names(files) <- samples$sample
txi.rsem <- tximport(files, type = "rsem", txIn = FALSE, txOut = FALSE)
head(txi.rsem$counts)
write.csv(as.data.frame(txi.rsem$counts), file="raw_counts.csv")
zero_length_and_unexpressed = (apply(txi.rsem$counts, 1, max) > 0) &
(apply(txi.rsem$length, 1, min) > 0)
txi.rsem$length = txi.rsem$length[zero_length_and_unexpressed,]
txi.rsem$abundance = txi.rsem$abundance[zero_length_and_unexpressed,]
txi.rsem$counts = txi.rsem$counts[zero_length_and_unexpressed,]
library('DESeq2')
sampleTable <- data.frame(condition = samples$pop)
sampleTable$condition <- relevel(factor(sampleTable$condition), ref = "ctl")
rownames(sampleTable) <- colnames(txi.rsem$counts)
dds <- DESeqDataSetFromTximport(txi.rsem, sampleTable, ~condition)
dds <- DESeq(dds)
resultsNames(dds)
baseMeanPerLvl <- sapply( levels(dds$condition), function(lvl) rowMeans( counts(dds,normalized=TRUE)[,dds$condition== lvl] ) )
write.csv(baseMeanPerLvl, file="normalized_counts.csv")
library(tidyverse)
trans_cts_corr <-counts(dds,normalized=TRUE) %>% cor(method = "spearman")
trans_cts_corr[1:5, 1:5]
library(corrr)
rplot(trans_cts_corr) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
write.csv(trans_cts_corr, file="correlation.csv")
# Read the CSV file into a data frame
df <- read.csv("condition_Atrophic_vs_Control.csv")
# Filter for significant genes (adj-p < 0.05)
significant_genes <- df[df$padj < 0.05, ]
# Filter the data frame for genes with padj < 0.05 and count the rows
count_significant_genes <- sum(df$padj < 0.05, na.rm = TRUE)
# Print the result
print(count_significant_genes)
# Count upregulated genes (log2FoldChange > 0)
upregulated_genes <- sum(significant_genes$log2FoldChange > 0, na.rm = TRUE)
# Count downregulated genes (log2FoldChange < 0)
downregulated_genes <- sum(significant_genes$log2FoldChange < 0, na.rm = TRUE)
# Print the results
print(paste("Number of upregulated genes:", upregulated_genes))
print(paste("Number of downregulated genes:", downregulated_genes))
# Count genes with a log2FoldChange > 2
count_log2_gt_2 <- sum(significant_genes$log2FoldChange > 2, na.rm = TRUE)
# Count genes with a log2FoldChange < -2
count_log2_lt_neg_2 <- sum(significant_genes$log2FoldChange < -2, na.rm = TRUE)
# Print the results
print(paste("Number of genes with log2FoldChange > 2:", count_log2_gt_2))
print(paste("Number of genes with log2FoldChange < -2:", count_log2_lt_neg_2))
library(tidyverse)
library(corrr)
# Read the CSV file into a data frame
df <- read.csv("condition_Atrophic_vs_Control.csv")
# Filter for significant genes (adj-p < 0.05)
significant_genes <- df[df$padj < 0.05, ]
# Filter the data frame for genes with padj < 0.05 and count the rows
count_significant_genes <- sum(df$padj < 0.05, na.rm = TRUE)
# Print the result
print(count_significant_genes)
# Count upregulated genes (log2FoldChange > 0)
upregulated_genes <- sum(significant_genes$log2FoldChange > 0, na.rm = TRUE)
# Count downregulated genes (log2FoldChange < 0)
downregulated_genes <- sum(significant_genes$log2FoldChange < 0, na.rm = TRUE)
# Print the results
print(paste("Number of upregulated genes:", upregulated_genes))
print(paste("Number of downregulated genes:", downregulated_genes))
# Count genes with a log2FoldChange > 2
count_log2_gt_2 <- sum(significant_genes$log2FoldChange > 2, na.rm = TRUE)
# Count genes with a log2FoldChange < -2
count_log2_lt_neg_2 <- sum(significant_genes$log2FoldChange < -2, na.rm = TRUE)
# Print the results
print(paste("Number of genes with log2FoldChange > 2:", count_log2_gt_2))
print(paste("Number of genes with log2FoldChange < -2:", count_log2_lt_neg_2))
# Get normalized counts and calculate Spearman correlation
trans_cts_corr <- counts(dds, normalized = TRUE) %>% cor(method = "spearman")
# Plot the correlation matrix
# The `rplot` function from the `corrr` package is used for this visualization
rplot(trans_cts_corr) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Write the correlation matrix to a CSV file
write.csv(trans_cts_corr, file = "correlation.csv")
# Plot the correlation matrix
# The `rplot` function from the `corrr` package is used for this visualization
rplot(trans_cts_corr) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Get normalized counts and calculate Spearman correlation
trans_cts_corr <- counts(dds, normalized = TRUE) %>% cor(method = "spearman")
library(tidyverse)
library(corrr)
# Read the CSV file into a data frame
df <- read.csv("condition_Atrophic_vs_Control.csv")
# Filter for significant genes (adj-p < 0.05)
significant_genes <- df[df$padj < 0.05, ]
# Filter the data frame for genes with padj < 0.05 and count the rows
count_significant_genes <- sum(df$padj < 0.05, na.rm = TRUE)
# Print the result
print(count_significant_genes)
# Count upregulated genes (log2FoldChange > 0)
upregulated_genes <- sum(significant_genes$log2FoldChange > 0, na.rm = TRUE)
# Count downregulated genes (log2FoldChange < 0)
downregulated_genes <- sum(significant_genes$log2FoldChange < 0, na.rm = TRUE)
# Print the results
print(paste("Number of upregulated genes:", upregulated_genes))
print(paste("Number of downregulated genes:", downregulated_genes))
# Count genes with a log2FoldChange > 2
count_log2_gt_2 <- sum(significant_genes$log2FoldChange > 2, na.rm = TRUE)
# Count genes with a log2FoldChange < -2
count_log2_lt_neg_2 <- sum(significant_genes$log2FoldChange < -2, na.rm = TRUE)
# Print the results
print(paste("Number of genes with log2FoldChange > 2:", count_log2_gt_2))
print(paste("Number of genes with log2FoldChange < -2:", count_log2_lt_neg_2))
# Get normalized counts and calculate Spearman correlation
trans_cts_corr <- counts(dds, normalized = TRUE) %>% cor(method = "spearman")
library(tidyverse)
library(corrr)
# Read the CSV file into a data frame
df <- read.csv("condition_Atrophic_vs_Control.csv")
# Filter for significant genes (adj-p < 0.05)
significant_genes <- df[df$padj < 0.05, ]
# Filter the data frame for genes with padj < 0.05 and count the rows
count_significant_genes <- sum(df$padj < 0.05, na.rm = TRUE)
# Print the result
print(count_significant_genes)
# Count upregulated genes (log2FoldChange > 0)
upregulated_genes <- sum(significant_genes$log2FoldChange > 0, na.rm = TRUE)
# Count downregulated genes (log2FoldChange < 0)
downregulated_genes <- sum(significant_genes$log2FoldChange < 0, na.rm = TRUE)
# Print the results
print(paste("Number of upregulated genes:", upregulated_genes))
print(paste("Number of downregulated genes:", downregulated_genes))
# Count genes with a log2FoldChange > 2
count_log2_gt_2 <- sum(significant_genes$log2FoldChange > 2, na.rm = TRUE)
# Count genes with a log2FoldChange < -2
count_log2_lt_neg_2 <- sum(significant_genes$log2FoldChange < -2, na.rm = TRUE)
# Print the results
print(paste("Number of genes with log2FoldChange > 2:", count_log2_gt_2))
print(paste("Number of genes with log2FoldChange < -2:", count_log2_lt_neg_2))
#Load into R
library(tximport)
samples <- read.table("rsem_results/samples.txt", header = TRUE)
samples
files <- file.path("rsem_results", paste0(samples$sample, ".genes.results"))
names(files) <- samples$sample
txi.rsem <- tximport(files, type = "rsem", txIn = FALSE, txOut = FALSE)
head(txi.rsem$counts)
write.csv(as.data.frame(txi.rsem$counts), file="raw_counts.csv")
zero_length_and_unexpressed = (apply(txi.rsem$counts, 1, max) > 0) &
(apply(txi.rsem$length, 1, min) > 0)
txi.rsem$length = txi.rsem$length[zero_length_and_unexpressed,]
txi.rsem$abundance = txi.rsem$abundance[zero_length_and_unexpressed,]
txi.rsem$counts = txi.rsem$counts[zero_length_and_unexpressed,]
library('DESeq2')
sampleTable <- data.frame(condition = samples$pop)
sampleTable$condition <- relevel(factor(sampleTable$condition), ref = "ctl")
rownames(sampleTable) <- colnames(txi.rsem$counts)
dds <- DESeqDataSetFromTximport(txi.rsem, sampleTable, ~condition)
dds <- DESeq(dds)
resultsNames(dds)
baseMeanPerLvl <- sapply( levels(dds$condition), function(lvl) rowMeans( counts(dds,normalized=TRUE)[,dds$condition== lvl] ) )
write.csv(baseMeanPerLvl, file="normalized_counts.csv")
library(tidyverse)
trans_cts_corr <-counts(dds,normalized=TRUE) %>% cor(method = "spearman")
# we use Spearman's correlation, a non-parametric metric based on ranks
trans_cts_corr[1:5, 1:5]
library(corrr)
rplot(trans_cts_corr) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
write.csv(trans_cts_corr, file="correlation.csv")
res<-results(dds,name="condition_atr_vs_ctl")
resOrdered <- res[order(res$pvalue),]
write.csv(as.data.frame(resOrdered), file="condition_Atrophic_vs_Control.csv")
# Read the CSV file into a data frame
df <- read.csv("condition_Atrophic_vs_Control.csv")
# Filter for significant genes (adj-p < 0.05)
significant_genes <- df[df$padj < 0.05, ]
# Filter the data frame for genes with padj < 0.05 and count the rows
count_significant_genes <- sum(df$padj < 0.05, na.rm = TRUE)
# Print the result
print(count_significant_genes)
# Count upregulated genes (log2FoldChange > 0)
upregulated_genes <- sum(significant_genes$log2FoldChange > 0, na.rm = TRUE)
# Count downregulated genes (log2FoldChange < 0)
downregulated_genes <- sum(significant_genes$log2FoldChange < 0, na.rm = TRUE)
# Print the results
print(paste("Number of upregulated genes:", upregulated_genes))
print(paste("Number of downregulated genes:", downregulated_genes))
# Count genes with a log2FoldChange > 2
count_log2_gt_2 <- sum(significant_genes$log2FoldChange > 2, na.rm = TRUE)
# Count genes with a log2FoldChange < -2
count_log2_lt_neg_2 <- sum(significant_genes$log2FoldChange < -2, na.rm = TRUE)
# Print the results
print(paste("Number of genes with log2FoldChange > 2:", count_log2_gt_2))
print(paste("Number of genes with log2FoldChange < -2:", count_log2_lt_neg_2))
